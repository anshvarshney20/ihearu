{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tech Gropes\\\\ihearu\\\\src\\\\Components\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst userAuthContext = /*#__PURE__*/createContext();\nexport function UserAuthContextProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState({});\n  const [authtoken, setauthtoken] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/admin/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.status === 200) {\n        setauthtoken(data);\n        setUser(jwtDecode(data.access));\n        localStorage.setItem('access', data.access);\n        setIsLoggedIn(true);\n        navigate('/dashboard');\n      } else {\n        throw new Error('Email and password do not match');\n      }\n    } catch (error) {\n      throw new Error('An error occurred during login. Please try again later.');\n    }\n  };\n  const forgotPassword = () => {\n    // Implement the logic for forgot password if needed\n  };\n  return /*#__PURE__*/_jsxDEV(userAuthContext.Provider, {\n    value: {\n      login,\n      forgotPassword,\n      user,\n      setauthtoken,\n      authtoken,\n      isLoggedIn\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(UserAuthContextProvider, \"6ZHGH2D4K8ImESrFEFm7OENIwrU=\");\n_c = UserAuthContextProvider;\nexport function useUserAuth() {\n  _s2();\n  return useContext(userAuthContext);\n}\n_s2(useUserAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserAuthContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","jsxDEV","_jsxDEV","userAuthContext","UserAuthContextProvider","children","_s","user","setUser","authtoken","setauthtoken","isLoggedIn","setIsLoggedIn","login","email","password","response","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","data","json","status","jwtDecode","access","localStorage","setItem","navigate","Error","error","forgotPassword","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUserAuth","_s2","$RefreshReg$"],"sources":["D:/Tech Gropes/ihearu/src/Components/AuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState } from 'react';\r\n\r\nconst userAuthContext = createContext();\r\n\r\nexport function UserAuthContextProvider({ children }) {\r\n    const [user, setUser] = useState({});\r\n    const [authtoken, setauthtoken] = useState('')\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    const login = async (email, password) => {\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/api/admin/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ email, password })\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.status === 200) {\r\n                setauthtoken(data);\r\n                setUser(jwtDecode(data.access));\r\n                localStorage.setItem('access', data.access);\r\n                setIsLoggedIn(true);\r\n                navigate('/dashboard');\r\n            } else {\r\n                throw new Error('Email and password do not match');\r\n            }\r\n        } catch (error) {\r\n            throw new Error('An error occurred during login. Please try again later.');\r\n        }\r\n    };\r\n    const forgotPassword = () => {\r\n        // Implement the logic for forgot password if needed\r\n    };\r\n\r\n    return (\r\n        <userAuthContext.Provider value={{ login, forgotPassword, user, setauthtoken, authtoken, isLoggedIn }}>\r\n            {children}\r\n        </userAuthContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useUserAuth() {\r\n    return useContext(userAuthContext);\r\n}\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,eAAe,gBAAGL,aAAa,CAAC,CAAC;AAEvC,OAAO,SAASM,uBAAuBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAClD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMa,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACrC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,kBAAiB,EAAE;QAC7EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEX,KAAK;UAAEC;QAAS,CAAC;MAC5C,CAAC,CAAC;MAEF,MAAMW,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAElC,IAAIX,QAAQ,CAACY,MAAM,KAAK,GAAG,EAAE;QACzBlB,YAAY,CAACgB,IAAI,CAAC;QAClBlB,OAAO,CAACqB,SAAS,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC;QAC/BC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEN,IAAI,CAACI,MAAM,CAAC;QAC3ClB,aAAa,CAAC,IAAI,CAAC;QACnBqB,QAAQ,CAAC,YAAY,CAAC;MAC1B,CAAC,MAAM;QACH,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;MACtD;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ,MAAM,IAAID,KAAK,CAAC,yDAAyD,CAAC;IAC9E;EACJ,CAAC;EACD,MAAME,cAAc,GAAGA,CAAA,KAAM;IACzB;EAAA,CACH;EAED,oBACIlC,OAAA,CAACC,eAAe,CAACkC,QAAQ;IAACC,KAAK,EAAE;MAAEzB,KAAK;MAAEuB,cAAc;MAAE7B,IAAI;MAAEG,YAAY;MAAED,SAAS;MAAEE;IAAW,CAAE;IAAAN,QAAA,EACjGA;EAAQ;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAEnC;AAACpC,EAAA,CAvCeF,uBAAuB;AAAAuC,EAAA,GAAvBvC,uBAAuB;AAyCvC,OAAO,SAASwC,WAAWA,CAAA,EAAG;EAAAC,GAAA;EAC1B,OAAO9C,UAAU,CAACI,eAAe,CAAC;AACtC;AAAC0C,GAAA,CAFeD,WAAW;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}