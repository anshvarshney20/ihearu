{"ast":null,"code":"var _jsxFileName = \"D:\\\\Tech Gropes\\\\ihearu\\\\src\\\\Components\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst userAuthContext = /*#__PURE__*/createContext();\nexport function UserAuthContextProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState({});\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const login = async (email, password) => {\n    setIsLoading(true);\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/admin/login`, {\n        email,\n        password\n      });\n      if (response.status !== 200) {\n        console.error('Authentication failed:', response.statusText);\n        // You might want to show an error message to the user\n        return;\n      }\n      const data = response.data;\n      localStorage.setItem('access', data.results.token);\n      setUser(data.results.verifyAdmin);\n      setIsLoggedIn(true);\n      navigate('/dashboard');\n      console.log('API Response:', data);\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        console.error('Axios Error during API request:', error.message);\n        // Handle specific Axios errors if needed\n        if (error.response) {\n          console.error('Axios Response Data:', error.response.data);\n          console.error('Axios Response Status:', error.response.status);\n          console.error('Axios Response Headers:', error.response.headers);\n        }\n      } else {\n        console.error('Non-Axios Error during API request:', error);\n        // Handle other errors, e.g., show a general error message to the user\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('access');\n    setUser({});\n    setIsLoggedIn(false);\n    navigate('/login'); // or navigate to the homepage\n  };\n  const forgotPassword = () => {\n    // Implement the logic for forgot password if needed\n  };\n\n  // Load user details from local storage on mount\n  useEffect(() => {\n    const token = localStorage.getItem('access');\n    if (token) {\n      // Make a request to get user details using the token\n      // If successful, update user state and set isLoggedIn to true\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(userAuthContext.Provider, {\n    value: {\n      login,\n      logout,\n      forgotPassword,\n      user,\n      isLoggedIn,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(UserAuthContextProvider, \"2pA2yX1LE0X63ytY2TuEf/5CqxI=\", false, function () {\n  return [useNavigate];\n});\n_c = UserAuthContextProvider;\nexport function useUserAuth() {\n  _s2();\n  return useContext(userAuthContext);\n}\n_s2(useUserAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserAuthContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","axios","Navigate","useNavigate","jsxDEV","_jsxDEV","userAuthContext","UserAuthContextProvider","children","_s","user","setUser","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","navigate","login","email","password","response","post","process","env","REACT_APP_API_URL","status","console","error","statusText","data","localStorage","setItem","results","token","verifyAdmin","log","isAxiosError","message","headers","logout","removeItem","forgotPassword","getItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUserAuth","_s2","$RefreshReg$"],"sources":["D:/Tech Gropes/ihearu/src/Components/AuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Navigate, useNavigate } from 'react-router-dom';\r\n\r\nconst userAuthContext = createContext();\r\n\r\nexport function UserAuthContextProvider({ children }) {\r\n    const [user, setUser] = useState({});\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const login = async (email, password) => {\r\n        setIsLoading(true);\r\n        try {\r\n            const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/admin/login`, { email, password });\r\n    \r\n            if (response.status !== 200) {\r\n                console.error('Authentication failed:', response.statusText);\r\n                // You might want to show an error message to the user\r\n                return;\r\n            }\r\n    \r\n            const data = response.data;\r\n            localStorage.setItem('access', data.results.token);\r\n            setUser(data.results.verifyAdmin);\r\n            setIsLoggedIn(true);\r\n            navigate('/dashboard');\r\n            console.log('API Response:', data);\r\n        } catch (error) {\r\n            if (axios.isAxiosError(error)) {\r\n                console.error('Axios Error during API request:', error.message);\r\n                // Handle specific Axios errors if needed\r\n                if (error.response) {\r\n                    console.error('Axios Response Data:', error.response.data);\r\n                    console.error('Axios Response Status:', error.response.status);\r\n                    console.error('Axios Response Headers:', error.response.headers);\r\n                }\r\n            } else {\r\n                console.error('Non-Axios Error during API request:', error);\r\n                // Handle other errors, e.g., show a general error message to the user\r\n            }\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n        const logout = () => {\r\n        localStorage.removeItem('access');\r\n        setUser({});\r\n        setIsLoggedIn(false);\r\n        navigate('/login'); // or navigate to the homepage\r\n    };\r\n\r\n    const forgotPassword = () => {\r\n        // Implement the logic for forgot password if needed\r\n    };\r\n\r\n    // Load user details from local storage on mount\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('access');\r\n        if (token) {\r\n            // Make a request to get user details using the token\r\n            // If successful, update user state and set isLoggedIn to true\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <userAuthContext.Provider value={{ login, logout, forgotPassword, user, isLoggedIn, isLoading }}>\r\n            {children}\r\n        </userAuthContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useUserAuth() {\r\n    return useContext(userAuthContext);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}